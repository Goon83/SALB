/* WARNING: THIS FILE IS AUTOMATICALLY GENERATED FROM A .SM FILE.
 * Changes made here will certainly be overwritten.
 */

/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"
#include "pvfs2-util.h"
#include "pvfs2-internal.h"
#include "pint-util.h"

enum
{
    UPDATE_DIR_ATTR_REQUIRED = 135
};

static struct PINT_state_s ST_prelude;
static struct PINT_pjmp_tbl_s ST_prelude_pjtbl[];
static struct PINT_tran_tbl_s ST_prelude_trtbl[];

static PINT_sm_action chdirent_verify_parent_metadata_and_read_directory_entry_handle(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_verify_parent_metadata_and_read_directory_entry_handle;
static struct PINT_pjmp_tbl_s ST_verify_parent_metadata_and_read_directory_entry_handle_pjtbl[];
static struct PINT_tran_tbl_s ST_verify_parent_metadata_and_read_directory_entry_handle_trtbl[];

static PINT_sm_action chdirent_read_directory_entry(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_read_directory_entry;
static struct PINT_pjmp_tbl_s ST_read_directory_entry_pjtbl[];
static struct PINT_tran_tbl_s ST_read_directory_entry_trtbl[];

static PINT_sm_action chdirent_read_directory_entry_failure(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_read_directory_entry_failure;
static struct PINT_pjmp_tbl_s ST_read_directory_entry_failure_pjtbl[];
static struct PINT_tran_tbl_s ST_read_directory_entry_failure_trtbl[];

static PINT_sm_action chdirent_change_directory_entry(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_change_directory_entry;
static struct PINT_pjmp_tbl_s ST_change_directory_entry_pjtbl[];
static struct PINT_tran_tbl_s ST_change_directory_entry_trtbl[];

static PINT_sm_action chdirent_change_directory_entry_failure(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_change_directory_entry_failure;
static struct PINT_pjmp_tbl_s ST_change_directory_entry_failure_pjtbl[];
static struct PINT_tran_tbl_s ST_change_directory_entry_failure_trtbl[];

static PINT_sm_action chdirent_check_for_req_dir_update(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_check_for_req_dir_update;
static struct PINT_pjmp_tbl_s ST_check_for_req_dir_update_pjtbl[];
static struct PINT_tran_tbl_s ST_check_for_req_dir_update_trtbl[];

static PINT_sm_action chdirent_update_directory_attr(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_update_directory_attr;
static struct PINT_pjmp_tbl_s ST_update_directory_attr_pjtbl[];
static struct PINT_tran_tbl_s ST_update_directory_attr_trtbl[];

static PINT_sm_action chdirent_setup_resp(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_setup_resp;
static struct PINT_pjmp_tbl_s ST_setup_resp_pjtbl[];
static struct PINT_tran_tbl_s ST_setup_resp_trtbl[];
static struct PINT_state_s ST_final_response;
static struct PINT_pjmp_tbl_s ST_final_response_pjtbl[];
static struct PINT_tran_tbl_s ST_final_response_trtbl[];

static PINT_sm_action chdirent_cleanup(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_cleanup;
static struct PINT_pjmp_tbl_s ST_cleanup_pjtbl[];
static struct PINT_tran_tbl_s ST_cleanup_trtbl[];

struct PINT_state_machine_s pvfs2_chdirent_sm = {
	.name = "pvfs2_chdirent_sm",
	.first_state = &ST_prelude
};

static struct PINT_state_s ST_prelude = {
	 .state_name = "prelude" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_JUMP ,
	 .action.nested = &pvfs2_prelude_sm ,
	 .pjtbl = NULL ,
	 .trtbl = ST_prelude_trtbl 
};

static struct PINT_tran_tbl_s ST_prelude_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_verify_parent_metadata_and_read_directory_entry_handle },
	{ .return_value = -1 ,
	 .next_state = &ST_final_response }
};

static struct PINT_state_s ST_verify_parent_metadata_and_read_directory_entry_handle = {
	 .state_name = "verify_parent_metadata_and_read_directory_entry_handle" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_RUN ,
	 .action.func = chdirent_verify_parent_metadata_and_read_directory_entry_handle ,
	 .pjtbl = NULL ,
	 .trtbl = ST_verify_parent_metadata_and_read_directory_entry_handle_trtbl 
};

static struct PINT_tran_tbl_s ST_verify_parent_metadata_and_read_directory_entry_handle_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_read_directory_entry },
	{ .return_value = -1 ,
	 .next_state = &ST_setup_resp }
};

static struct PINT_state_s ST_read_directory_entry = {
	 .state_name = "read_directory_entry" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_RUN ,
	 .action.func = chdirent_read_directory_entry ,
	 .pjtbl = NULL ,
	 .trtbl = ST_read_directory_entry_trtbl 
};

static struct PINT_tran_tbl_s ST_read_directory_entry_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_change_directory_entry },
	{ .return_value = -1 ,
	 .next_state = &ST_read_directory_entry_failure }
};

static struct PINT_state_s ST_read_directory_entry_failure = {
	 .state_name = "read_directory_entry_failure" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_RUN ,
	 .action.func = chdirent_read_directory_entry_failure ,
	 .pjtbl = NULL ,
	 .trtbl = ST_read_directory_entry_failure_trtbl 
};

static struct PINT_tran_tbl_s ST_read_directory_entry_failure_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_setup_resp }
};

static struct PINT_state_s ST_change_directory_entry = {
	 .state_name = "change_directory_entry" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_RUN ,
	 .action.func = chdirent_change_directory_entry ,
	 .pjtbl = NULL ,
	 .trtbl = ST_change_directory_entry_trtbl 
};

static struct PINT_tran_tbl_s ST_change_directory_entry_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_check_for_req_dir_update },
	{ .return_value = -1 ,
	 .next_state = &ST_change_directory_entry_failure }
};

static struct PINT_state_s ST_change_directory_entry_failure = {
	 .state_name = "change_directory_entry_failure" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_RUN ,
	 .action.func = chdirent_change_directory_entry_failure ,
	 .pjtbl = NULL ,
	 .trtbl = ST_change_directory_entry_failure_trtbl 
};

static struct PINT_tran_tbl_s ST_change_directory_entry_failure_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_setup_resp }
};

static struct PINT_state_s ST_check_for_req_dir_update = {
	 .state_name = "check_for_req_dir_update" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_RUN ,
	 .action.func = chdirent_check_for_req_dir_update ,
	 .pjtbl = NULL ,
	 .trtbl = ST_check_for_req_dir_update_trtbl 
};

static struct PINT_tran_tbl_s ST_check_for_req_dir_update_trtbl[] = {
	{ .return_value = UPDATE_DIR_ATTR_REQUIRED ,
	 .next_state = &ST_update_directory_attr },
	{ .return_value = -1 ,
	 .next_state = &ST_setup_resp }
};

static struct PINT_state_s ST_update_directory_attr = {
	 .state_name = "update_directory_attr" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_RUN ,
	 .action.func = chdirent_update_directory_attr ,
	 .pjtbl = NULL ,
	 .trtbl = ST_update_directory_attr_trtbl 
};

static struct PINT_tran_tbl_s ST_update_directory_attr_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_setup_resp }
};

static struct PINT_state_s ST_setup_resp = {
	 .state_name = "setup_resp" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_RUN ,
	 .action.func = chdirent_setup_resp ,
	 .pjtbl = NULL ,
	 .trtbl = ST_setup_resp_trtbl 
};

static struct PINT_tran_tbl_s ST_setup_resp_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_final_response }
};

static struct PINT_state_s ST_final_response = {
	 .state_name = "final_response" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_JUMP ,
	 .action.nested = &pvfs2_final_response_sm ,
	 .pjtbl = NULL ,
	 .trtbl = ST_final_response_trtbl 
};

static struct PINT_tran_tbl_s ST_final_response_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_cleanup }
};

static struct PINT_state_s ST_cleanup = {
	 .state_name = "cleanup" ,
	 .parent_machine = &pvfs2_chdirent_sm ,
	 .flag = SM_RUN ,
	 .action.func = chdirent_cleanup ,
	 .pjtbl = NULL ,
	 .trtbl = ST_cleanup_trtbl 
};

static struct PINT_tran_tbl_s ST_cleanup_trtbl[] = {
	{ .return_value = -1 ,

	 .flag = SM_TERM }
};

# 99 "src/server/chdirent.sm"


static PINT_sm_action chdirent_verify_parent_metadata_and_read_directory_entry_handle(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t i;

    s_op->key.buffer = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;

    s_op->val.buffer = &s_op->u.chdirent.dirdata_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(
        GOSSIP_SERVER_DEBUG,
        "  reading dirdata handle (coll_id = 0x%x, handle = %llu, "
        "key = %s (%d), val_buf = %p (%d))\n",
        s_op->req->u.chdirent.fs_id,
        llu(s_op->req->u.chdirent.handle),
        (char *) s_op->key.buffer,
        s_op->key.buffer_sz,
        s_op->val.buffer,
        s_op->val.buffer_sz);

    ret = job_trove_keyval_read(
        s_op->req->u.chdirent.fs_id,
        s_op->req->u.chdirent.handle,
        &s_op->key,
        &s_op->val,
        0,
        NULL,
        smcb,
        0,
        js_p,
        &i,
        server_job_context, s_op->req->hints);

    return ret;
}

static PINT_sm_action chdirent_read_directory_entry(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t j_id;

    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "  reading from dirent handle = %llu, name = %s\n",
		 llu(s_op->u.chdirent.dirdata_handle),
		 s_op->req->u.chdirent.entry);

    s_op->key.buffer = s_op->req->u.chdirent.entry;
    s_op->key.buffer_sz = strlen(s_op->req->u.chdirent.entry) + 1;
    s_op->val.buffer = &s_op->u.chdirent.old_dirent_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    ret = job_trove_keyval_read(
        s_op->req->u.chdirent.fs_id,
        s_op->u.chdirent.dirdata_handle,
        &s_op->key,
        &s_op->val,
        0,
        NULL,
        smcb,
        0,
        js_p,
        &j_id,
        server_job_context, s_op->req->hints);

    return ret;
}

static PINT_sm_action chdirent_read_directory_entry_failure(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    switch (js_p->error_code)
    {
	case -TROVE_ENOENT:
	    js_p->error_code = -PVFS_ENOENT;
	    break;
	default:
	    gossip_err("chdirent_read_directory_entry_failure: "
                       "unexpected error %d\n", js_p->error_code);
	    break;
    }
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action chdirent_change_directory_entry(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t j_id;

    js_p->error_code = 0;

    s_op->u.chdirent.new_dirent_handle =
        s_op->req->u.chdirent.new_dirent_handle;

    if (s_op->u.chdirent.old_dirent_handle ==
        s_op->u.chdirent.new_dirent_handle)
    {
        /* FIXME: return an error since a dirent is
           being changed to itself (?) */
    }

    s_op->key.buffer = s_op->req->u.chdirent.entry;
    s_op->key.buffer_sz = strlen(s_op->req->u.chdirent.entry) + 1;

    s_op->val.buffer = &s_op->u.chdirent.new_dirent_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "  changing dir entry for %s from handle value "
                 "%llu to %llu\n", s_op->req->u.chdirent.entry,
                 llu(s_op->u.chdirent.old_dirent_handle),
                 llu(s_op->u.chdirent.new_dirent_handle));

    ret = job_trove_keyval_write(
        s_op->req->u.chdirent.fs_id, s_op->u.chdirent.dirdata_handle,
        &s_op->key, &s_op->val, 
        TROVE_SYNC |
        0,
        NULL, smcb, 0, js_p, &j_id, server_job_context, s_op->req->hints);

    s_op->u.chdirent.dir_attr_update_required = 1;
    return ret;
}

static PINT_sm_action chdirent_check_for_req_dir_update(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    if ((js_p->error_code == 0) &&
        (s_op->u.chdirent.dir_attr_update_required))
    {
        js_p->error_code = UPDATE_DIR_ATTR_REQUIRED;
    }
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action chdirent_update_directory_attr(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;
    PVFS_object_attr tmp_attr, *tmp_attr_ptr = &tmp_attr;
    PVFS_object_attr *dspace_attr = NULL;
    PVFS_ds_attributes *ds_attr = NULL;

    if (js_p->error_code != UPDATE_DIR_ATTR_REQUIRED)
    {
        PVFS_perror_gossip("previous keyval write failed",
                           js_p->error_code);
        return SM_ACTION_COMPLETE;
    }

    memset(&tmp_attr, 0, sizeof(PVFS_object_attr));
    dspace_attr = &s_op->attr;
    dspace_attr->mask |= (PVFS_ATTR_COMMON_ATIME | PVFS_ATTR_COMMON_MTIME | PVFS_ATTR_COMMON_CTIME);

    PVFS_object_attr_overwrite_setable(tmp_attr_ptr, dspace_attr);
    ds_attr = &(s_op->ds_attr);
    PVFS_object_attr_to_ds_attr(tmp_attr_ptr, ds_attr);

    ret = job_trove_dspace_setattr(
        s_op->req->u.chdirent.fs_id, s_op->req->u.chdirent.handle,
        ds_attr, 
        TROVE_SYNC |
        0,
        smcb, 0, js_p, &j_id, server_job_context, s_op->req->hints);

    return ret;
}

static PINT_sm_action chdirent_change_directory_entry_failure(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    assert(js_p->error_code != -TROVE_ENOENT);
	    
    switch (js_p->error_code)
    {
	case -TROVE_ENOENT:
	    js_p->error_code = -PVFS_ENOENT;
	    break;
	default:
	    break;
    }
    gossip_err("unexpected error %d\n", js_p->error_code);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action chdirent_setup_resp(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    if (js_p->error_code == 0)
    {
	/* return original dirent handle in the response */
	s_op->resp.u.chdirent.old_dirent_handle =
            s_op->u.chdirent.old_dirent_handle;

	gossip_debug(GOSSIP_SERVER_DEBUG,
		     "  succeeded; returning handle %llu in response\n",
		     llu(s_op->resp.u.chdirent.old_dirent_handle));
    }
    else
    {
	gossip_debug(GOSSIP_SERVER_DEBUG, "  sending error response\n");
    }
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action chdirent_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    return (server_state_machine_complete(smcb));
}

PINT_GET_OBJECT_REF_DEFINE(chdirent);

struct PINT_server_req_params pvfs2_chdirent_params =
{
    .string_name = "chdirent",
    .perm = PINT_SERVER_CHECK_WRITE,
    .access_type = PINT_server_req_modify,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .get_object_ref = PINT_get_object_ref_chdirent,
    .state_machine = &pvfs2_chdirent_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
