/* WARNING: THIS FILE IS AUTOMATICALLY GENERATED FROM A .SM FILE.
 * Changes made here will certainly be overwritten.
 */

/* 
 * (C) 2001 The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"
#include "pvfs2-internal.h"
#include "pint-util.h"
#include "pint-cached-config.h"

#define REPLACE_DONE 100
PVFS_ds_attributes set_df_attr;


static struct PINT_state_s ST_prelude;
static struct PINT_pjmp_tbl_s ST_prelude_pjtbl[];
static struct PINT_tran_tbl_s ST_prelude_trtbl[];

static PINT_sm_action create_metafile(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_create_metafile;
static struct PINT_pjmp_tbl_s ST_create_metafile_pjtbl[];
static struct PINT_tran_tbl_s ST_create_metafile_trtbl[];

static PINT_sm_action check_stuffed(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_check_stuffed;
static struct PINT_pjmp_tbl_s ST_check_stuffed_pjtbl[];
static struct PINT_tran_tbl_s ST_check_stuffed_trtbl[];

static PINT_sm_action create_local_datafiles(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_create_local_datafiles;
static struct PINT_pjmp_tbl_s ST_create_local_datafiles_pjtbl[];
static struct PINT_tran_tbl_s ST_create_local_datafiles_trtbl[];

static PINT_sm_action check_datafile_attribs_op(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_pre_read_local_datafile_attribs;
static struct PINT_pjmp_tbl_s ST_pre_read_local_datafile_attribs_pjtbl[];
static struct PINT_tran_tbl_s ST_pre_read_local_datafile_attribs_trtbl[];

static PINT_sm_action set_local_datafile_metafile_op(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_set_local_datafile_metafile_op;
static struct PINT_pjmp_tbl_s ST_set_local_datafile_metafile_op_pjtbl[];
static struct PINT_tran_tbl_s ST_set_local_datafile_metafile_op_trtbl[];

static PINT_sm_action setup_local_datafile_handles(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_setup_local_datafile_handles;
static struct PINT_pjmp_tbl_s ST_setup_local_datafile_handles_pjtbl[];
static struct PINT_tran_tbl_s ST_setup_local_datafile_handles_trtbl[];

static PINT_sm_action request_datafiles(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_request_datafiles;
static struct PINT_pjmp_tbl_s ST_request_datafiles_pjtbl[];
static struct PINT_tran_tbl_s ST_request_datafiles_trtbl[];
static struct PINT_state_s ST_set_datafile_attrib;
static struct PINT_pjmp_tbl_s ST_set_datafile_attrib_pjtbl[];
static struct PINT_tran_tbl_s ST_set_datafile_attrib_trtbl[];

static PINT_sm_action write_keyvals(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_write_keyvals;
static struct PINT_pjmp_tbl_s ST_write_keyvals_pjtbl[];
static struct PINT_tran_tbl_s ST_write_keyvals_trtbl[];

static PINT_sm_action setattr_setobj_attribs(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_setobj_attribs;
static struct PINT_pjmp_tbl_s ST_setobj_attribs_pjtbl[];
static struct PINT_tran_tbl_s ST_setobj_attribs_trtbl[];

static PINT_sm_action setup_resp(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_setup_resp;
static struct PINT_pjmp_tbl_s ST_setup_resp_pjtbl[];
static struct PINT_tran_tbl_s ST_setup_resp_trtbl[];

static PINT_sm_action remove_local_datafile_handles(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_remove_local_datafile_handles;
static struct PINT_pjmp_tbl_s ST_remove_local_datafile_handles_pjtbl[];
static struct PINT_tran_tbl_s ST_remove_local_datafile_handles_trtbl[];

static PINT_sm_action replace_remote_datafile_handles(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_replace_remote_datafile_handles;
static struct PINT_pjmp_tbl_s ST_replace_remote_datafile_handles_pjtbl[];
static struct PINT_tran_tbl_s ST_replace_remote_datafile_handles_trtbl[];

static PINT_sm_action remove_metafile_object(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_remove_metafile_object;
static struct PINT_pjmp_tbl_s ST_remove_metafile_object_pjtbl[];
static struct PINT_tran_tbl_s ST_remove_metafile_object_trtbl[];

static PINT_sm_action remove_keyvals(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_remove_keyvals;
static struct PINT_pjmp_tbl_s ST_remove_keyvals_pjtbl[];
static struct PINT_tran_tbl_s ST_remove_keyvals_trtbl[];

static PINT_sm_action setup_final_response(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_setup_final_response;
static struct PINT_pjmp_tbl_s ST_setup_final_response_pjtbl[];
static struct PINT_tran_tbl_s ST_setup_final_response_trtbl[];
static struct PINT_state_s ST_final_response;
static struct PINT_pjmp_tbl_s ST_final_response_pjtbl[];
static struct PINT_tran_tbl_s ST_final_response_trtbl[];

static PINT_sm_action cleanup(
	struct PINT_smcb *smcb, job_status_s *js_p);

static struct PINT_state_s ST_cleanup;
static struct PINT_pjmp_tbl_s ST_cleanup_pjtbl[];
static struct PINT_tran_tbl_s ST_cleanup_trtbl[];

struct PINT_state_machine_s pvfs2_create_sm = {
	.name = "pvfs2_create_sm",
	.first_state = &ST_prelude
};

static struct PINT_state_s ST_prelude = {
	 .state_name = "prelude" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_JUMP ,
	 .action.nested = &pvfs2_prelude_sm ,
	 .pjtbl = NULL ,
	 .trtbl = ST_prelude_trtbl 
};

static struct PINT_tran_tbl_s ST_prelude_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_create_metafile },
	{ .return_value = -1 ,
	 .next_state = &ST_setup_final_response }
};

static struct PINT_state_s ST_create_metafile = {
	 .state_name = "create_metafile" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = create_metafile ,
	 .pjtbl = NULL ,
	 .trtbl = ST_create_metafile_trtbl 
};

static struct PINT_tran_tbl_s ST_create_metafile_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_check_stuffed },
	{ .return_value = -1 ,
	 .next_state = &ST_setup_final_response }
};

static struct PINT_state_s ST_check_stuffed = {
	 .state_name = "check_stuffed" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = check_stuffed ,
	 .pjtbl = NULL ,
	 .trtbl = ST_check_stuffed_trtbl 
};

static struct PINT_tran_tbl_s ST_check_stuffed_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_create_local_datafiles },
	{ .return_value = -1 ,
	 .next_state = &ST_setup_final_response }
};

static struct PINT_state_s ST_create_local_datafiles = {
	 .state_name = "create_local_datafiles" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = create_local_datafiles ,
	 .pjtbl = NULL ,
	 .trtbl = ST_create_local_datafiles_trtbl 
};

static struct PINT_tran_tbl_s ST_create_local_datafiles_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_pre_read_local_datafile_attribs },
	{ .return_value = -1 ,
	 .next_state = &ST_remove_metafile_object }
};

static struct PINT_state_s ST_pre_read_local_datafile_attribs = {
	 .state_name = "pre_read_local_datafile_attribs" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = check_datafile_attribs_op ,
	 .pjtbl = NULL ,
	 .trtbl = ST_pre_read_local_datafile_attribs_trtbl 
};

static struct PINT_tran_tbl_s ST_pre_read_local_datafile_attribs_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_set_local_datafile_metafile_op },
	{ .return_value = -1 ,
	 .next_state = &ST_remove_metafile_object }
};

static struct PINT_state_s ST_set_local_datafile_metafile_op = {
	 .state_name = "set_local_datafile_metafile_op" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = set_local_datafile_metafile_op ,
	 .pjtbl = NULL ,
	 .trtbl = ST_set_local_datafile_metafile_op_trtbl 
};

static struct PINT_tran_tbl_s ST_set_local_datafile_metafile_op_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_setup_local_datafile_handles },
	{ .return_value = -1 ,
	 .next_state = &ST_remove_metafile_object }
};

static struct PINT_state_s ST_setup_local_datafile_handles = {
	 .state_name = "setup_local_datafile_handles" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = setup_local_datafile_handles ,
	 .pjtbl = NULL ,
	 .trtbl = ST_setup_local_datafile_handles_trtbl 
};

static struct PINT_tran_tbl_s ST_setup_local_datafile_handles_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_request_datafiles },
	{ .return_value = -1 ,
	 .next_state = &ST_remove_local_datafile_handles }
};

static struct PINT_state_s ST_request_datafiles = {
	 .state_name = "request_datafiles" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = request_datafiles ,
	 .pjtbl = NULL ,
	 .trtbl = ST_request_datafiles_trtbl 
};

static struct PINT_tran_tbl_s ST_request_datafiles_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_set_datafile_attrib },
	{ .return_value = -1 ,
	 .next_state = &ST_remove_local_datafile_handles }
};

static struct PINT_state_s ST_set_datafile_attrib = {
	 .state_name = "set_datafile_attrib" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_JUMP ,
	 .action.nested = &pvfs2_set_df_attr_client_sm ,
	 .pjtbl = NULL ,
	 .trtbl = ST_set_datafile_attrib_trtbl 
};

static struct PINT_tran_tbl_s ST_set_datafile_attrib_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_write_keyvals },
	{ .return_value = -1 ,
	 .next_state = &ST_remove_local_datafile_handles }
};

static struct PINT_state_s ST_write_keyvals = {
	 .state_name = "write_keyvals" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = write_keyvals ,
	 .pjtbl = NULL ,
	 .trtbl = ST_write_keyvals_trtbl 
};

static struct PINT_tran_tbl_s ST_write_keyvals_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_setobj_attribs },
	{ .return_value = -1 ,
	 .next_state = &ST_replace_remote_datafile_handles }
};

static struct PINT_state_s ST_setobj_attribs = {
	 .state_name = "setobj_attribs" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = setattr_setobj_attribs ,
	 .pjtbl = NULL ,
	 .trtbl = ST_setobj_attribs_trtbl 
};

static struct PINT_tran_tbl_s ST_setobj_attribs_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_setup_resp },
	{ .return_value = -1 ,
	 .next_state = &ST_remove_keyvals }
};

static struct PINT_state_s ST_setup_resp = {
	 .state_name = "setup_resp" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = setup_resp ,
	 .pjtbl = NULL ,
	 .trtbl = ST_setup_resp_trtbl 
};

static struct PINT_tran_tbl_s ST_setup_resp_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_setup_final_response }
};

static struct PINT_state_s ST_remove_local_datafile_handles = {
	 .state_name = "remove_local_datafile_handles" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = remove_local_datafile_handles ,
	 .pjtbl = NULL ,
	 .trtbl = ST_remove_local_datafile_handles_trtbl 
};

static struct PINT_tran_tbl_s ST_remove_local_datafile_handles_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_remove_metafile_object }
};

static struct PINT_state_s ST_replace_remote_datafile_handles = {
	 .state_name = "replace_remote_datafile_handles" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = replace_remote_datafile_handles ,
	 .pjtbl = NULL ,
	 .trtbl = ST_replace_remote_datafile_handles_trtbl 
};

static struct PINT_tran_tbl_s ST_replace_remote_datafile_handles_trtbl[] = {
	{ .return_value = REPLACE_DONE ,
	 .next_state = &ST_remove_local_datafile_handles },
	{ .return_value = -1 ,
	 .next_state = &ST_replace_remote_datafile_handles }
};

static struct PINT_state_s ST_remove_metafile_object = {
	 .state_name = "remove_metafile_object" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = remove_metafile_object ,
	 .pjtbl = NULL ,
	 .trtbl = ST_remove_metafile_object_trtbl 
};

static struct PINT_tran_tbl_s ST_remove_metafile_object_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_setup_final_response }
};

static struct PINT_state_s ST_remove_keyvals = {
	 .state_name = "remove_keyvals" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = remove_keyvals ,
	 .pjtbl = NULL ,
	 .trtbl = ST_remove_keyvals_trtbl 
};

static struct PINT_tran_tbl_s ST_remove_keyvals_trtbl[] = {
	{ .return_value = 0 ,
	 .next_state = &ST_replace_remote_datafile_handles },
	{ .return_value = -1 ,
	 .next_state = &ST_setup_final_response }
};

static struct PINT_state_s ST_setup_final_response = {
	 .state_name = "setup_final_response" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = setup_final_response ,
	 .pjtbl = NULL ,
	 .trtbl = ST_setup_final_response_trtbl 
};

static struct PINT_tran_tbl_s ST_setup_final_response_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_final_response }
};

static struct PINT_state_s ST_final_response = {
	 .state_name = "final_response" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_JUMP ,
	 .action.nested = &pvfs2_final_response_sm ,
	 .pjtbl = NULL ,
	 .trtbl = ST_final_response_trtbl 
};

static struct PINT_tran_tbl_s ST_final_response_trtbl[] = {
	{ .return_value = -1 ,
	 .next_state = &ST_cleanup }
};

static struct PINT_state_s ST_cleanup = {
	 .state_name = "cleanup" ,
	 .parent_machine = &pvfs2_create_sm ,
	 .flag = SM_RUN ,
	 .action.func = cleanup ,
	 .pjtbl = NULL ,
	 .trtbl = ST_cleanup_trtbl 
};

static struct PINT_tran_tbl_s ST_cleanup_trtbl[] = {
	{ .return_value = -1 ,

	 .flag = SM_TERM }
};

# 154 "src/server/create.sm"


static int setup_final_response(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    /* retrieve original error code if present */
    if(s_op->u.create.saved_error_code)
    {
        js_p->error_code = s_op->u.create.saved_error_code;
    }

    /* otherwise propigate the js_p->error code */
    return(SM_ACTION_COMPLETE);
}

static int create_metafile(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t i;
    PVFS_handle_extent_array meta_handle_ext_array;
    server_configuration_s *config = get_server_config_struct();

    ret = PINT_cached_config_get_server(
        s_op->req->u.create.fs_id,
        config->host_id,
        PINT_SERVER_TYPE_META,
        &meta_handle_ext_array);

    ret = job_trove_dspace_create(
        s_op->req->u.create.fs_id,
        &meta_handle_ext_array,
        PVFS_TYPE_METAFILE,
        NULL,
        0,
        smcb,
        0,
        js_p,
        &i,
        server_job_context, s_op->req->hints);

    return(ret);
}

static int check_stuffed(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int server_type;
    server_configuration_s *config = get_server_config_struct();
    struct filesystem_configuration_s *fs_conf;
    PVFS_BMI_addr_t myaddr;
    PVFS_sys_layout *layout;
    int ret;
    const char* svr_name;
    int i;

    s_op->resp.u.create.metafile_handle = js_p->handle;
    gossip_debug(
        GOSSIP_SERVER_DEBUG, "Metafile handle created: %llu\n",
        llu(js_p->handle));

    assert(config);

    layout = &s_op->req->u.create.layout;

    if(layout->algorithm == PVFS_SYS_LAYOUT_LIST)
    {
        for(i=0; i<layout->server_list.count; i++)
        {
            gossip_debug(GOSSIP_SERVER_DEBUG, "layout list server %d: %lld\n", 
                i, lld(layout->server_list.servers[i])); 
        }
    }

    fs_conf = PINT_config_find_fs_id(config, 
        s_op->req->u.create.fs_id);
    if(!fs_conf)
    {
        js_p->error_code = -PVFS_EINVAL;
        return(SM_ACTION_COMPLETE);
    }

    ret = BMI_addr_lookup(&myaddr, config->host_id);
    if(ret != 0)
    {
        /* we can't get our own address? */
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    /* is this metadata server also IO? */
    svr_name = PINT_cached_config_map_addr(s_op->req->u.create.fs_id,
                                myaddr, &server_type);
    if(!svr_name)
    {
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    /* for now only support stuffing of ROUND_ROBIN layouts */
    if((server_type & PINT_SERVER_TYPE_IO) && fs_conf->file_stuffing && layout->algorithm == PVFS_SYS_LAYOUT_ROUND_ROBIN)
    {    
      gossip_debug(GOSSIP_SERVER_DEBUG, "Goon: suffed\n"); 
        /* we can do a stuffed create here, only one datafile */
        s_op->req->u.create.attr.u.meta.dfile_count = 1;
        s_op->resp.u.create.datafile_count = 1;
        s_op->resp.u.create.datafile_handles = malloc(sizeof(PVFS_handle));
        s_op->u.create.handle_array_local = malloc(sizeof(PVFS_handle));
        if(!s_op->resp.u.create.datafile_handles || !s_op->u.create.handle_array_local)
        {
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }

        s_op->resp.u.create.stuffed = 1;
        js_p->error_code = 0;
        return SM_ACTION_COMPLETE;
    }

    gossip_debug(GOSSIP_SERVER_DEBUG, "Goon: no suffed, # of IOes %d \n", s_op->req->u.create.num_dfiles_req); 
    /* file will not be stuffed; need to allocate all datafiles */
    s_op->u.create.num_io_servers = s_op->req->u.create.num_dfiles_req;
    s_op->resp.u.create.datafile_handles = malloc(
        sizeof(*s_op->resp.u.create.datafile_handles) *
        s_op->u.create.num_io_servers);
    s_op->u.create.handle_array_local = malloc(
        sizeof(*s_op->u.create.handle_array_local) *
        s_op->u.create.num_io_servers);
    s_op->u.create.handle_array_remote = malloc(
        sizeof(*s_op->u.create.handle_array_remote) *
        s_op->u.create.num_io_servers);
    s_op->u.create.remote_io_servers = malloc(
        sizeof(char*) *
        s_op->u.create.num_io_servers);
    if(!s_op->resp.u.create.datafile_handles || 
        !s_op->u.create.handle_array_local ||
        !s_op->u.create.handle_array_remote ||
        !s_op->u.create.remote_io_servers)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* gather list of servers to use, may include local server */
    ret = PINT_cached_config_get_server_list(
        s_op->req->u.create.fs_id,
        s_op->req->u.create.attr.u.meta.dist,
        s_op->req->u.create.num_dfiles_req,
        &s_op->req->u.create.layout,
        &s_op->u.create.io_servers,
        &s_op->u.create.num_io_servers);
    if(ret < 0)
    {
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    /* layout may have adjusted number of datafiles */
    s_op->req->u.create.attr.u.meta.dfile_count
        = s_op->u.create.num_io_servers;

    s_op->resp.u.create.datafile_count 
        = s_op->u.create.num_io_servers;
    for(i=0; i<s_op->u.create.num_io_servers; i++)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, "io_server %d: %s\n", 
            i, s_op->u.create.io_servers[i]); 
    }

    s_op->resp.u.create.stuffed = 0;
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static int create_local_datafiles(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t tmp_id;

    PVFS_handle_extent_array data_handle_ext_array;
    server_configuration_s *config = get_server_config_struct();
    int i;
    int tmp_index = 0;

    if(s_op->resp.u.create.stuffed)
    {
        /* only one datafile, and it is local */
        s_op->u.create.handle_array_local_count = 1;
        s_op->u.create.handle_array_remote_count = 0;
    }
    else
    {
        /* figure out how many datafiles need to be local vs. remote */
        s_op->u.create.handle_array_local_count = 0;
        s_op->u.create.handle_array_remote_count = 0;
        for(i=0; i<s_op->u.create.num_io_servers; i++)
        {
            if(!strcmp(s_op->u.create.io_servers[i], config->host_id))
            {
                s_op->u.create.handle_array_local_count++;
            }
            else
            {
                s_op->u.create.handle_array_remote_count++;
                s_op->u.create.remote_io_servers[tmp_index] = 
                    s_op->u.create.io_servers[i];
                tmp_index++;
            }
        }
    }

    gossip_debug(GOSSIP_SERVER_DEBUG, "creating %d local data files\n", 
        s_op->u.create.handle_array_local_count);
    gossip_debug(GOSSIP_SERVER_DEBUG, "creating %d remote data files\n", 
        s_op->u.create.handle_array_remote_count);

    if(s_op->u.create.handle_array_local_count == 0)
    {
        /* no local work to do */
        js_p->error_code = 0;
        return(SM_ACTION_COMPLETE);
    }

    

    /* find local extent array */
    ret = PINT_cached_config_get_server(
        s_op->req->u.create.fs_id,
        config->host_id,
        PINT_SERVER_TYPE_IO,
        &data_handle_ext_array);
    if(ret < 0)
    {
        js_p->error_code = ret;
        return(SM_ACTION_COMPLETE);
    }

    
      
    
    /* deliberately not setting SYNC flag, because both the attrs and
     * keyvals will be synced in later states
     */
    ret = job_trove_dspace_create_list(
        s_op->req->u.create.fs_id,
        &data_handle_ext_array,
        s_op->u.create.handle_array_local,
        s_op->u.create.handle_array_local_count,
        PVFS_TYPE_DATAFILE,
	NULL,
        TROVE_SYNC,
        smcb,
        0,
        js_p,
        &tmp_id,
        server_job_context,
        s_op->req->hints);

    return(ret);
}

/* Add metafile to datafile's attributes */
static PINT_sm_action set_local_datafile_metafile_op(struct PINT_smcb *smcb, job_status_s *js_p)
{

  int ret;
  struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
  job_id_t j_id;


  set_df_attr.metafile = s_op->resp.u.create.metafile_handle;

  ret = job_trove_dspace_setattr(
	  s_op->req->u.create.fs_id,
	  s_op->u.create.handle_array_local[0],
	  &set_df_attr, 
	  TROVE_SYNC,
	  smcb, 
	  0, 
	  js_p, 
	  &j_id, 
	  server_job_context, 
	  NULL);
  
  return ret;  
  
}


/* Get the origianl datafile's attributes */
static PINT_sm_action check_datafile_attribs_op(struct PINT_smcb *smcb, job_status_s *js_p)
{

  
  job_id_t j_id;
  struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
  
  memset(&set_df_attr, 0, sizeof(set_df_attr));

  //  gossip_debug(GOSSIP_LB_DEBUG, "\n\n Get the request \n\n");
  return (job_trove_dspace_getattr(
				   s_op->req->u.create.fs_id,
				   s_op->u.create.handle_array_local[0],
				   smcb,
				   &set_df_attr,
				   0,
				   js_p,
				   &j_id,
				   server_job_context,
				   NULL)
	  );
}



static PINT_sm_action request_datafiles(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    if(s_op->u.create.handle_array_remote_count == 0)
    {
        js_p->error_code = 0;
        return(SM_ACTION_COMPLETE);
    }

    ret = job_precreate_pool_get_handles(
        s_op->req->u.create.fs_id,
        s_op->u.create.handle_array_remote_count,
        s_op->u.create.remote_io_servers,
        s_op->u.create.handle_array_remote,
        0,
        smcb,
        0,
        js_p,
        &j_id,
        server_job_context,
        s_op->req->hints);
    return ret;
}

static PINT_sm_action remove_metafile_object(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    /* save the error code before we begin cleanup */
    if(!s_op->u.create.saved_error_code)
    {
        s_op->u.create.saved_error_code = js_p->error_code;
    }

    ret = job_trove_dspace_remove(
        s_op->req->u.create.fs_id,
        s_op->resp.u.create.metafile_handle,
        0,
        smcb,
        0,
        js_p,
        &j_id,
        server_job_context,
        s_op->req->hints);
    return ret;
}

static PINT_sm_action remove_local_datafile_handles(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    //    gossip_debug(GOSSIP_LB_DEBUG,"Enter remove local datafile handles \n");
    /* save the error code before we begin cleanup */
    if(!s_op->u.create.saved_error_code)
    {
        s_op->u.create.saved_error_code = js_p->error_code;
    }

    if(s_op->u.create.handle_array_local_count == 0)
    {
        /* nothing to do */
        js_p->error_code = 0;
        return(SM_ACTION_COMPLETE);
    }

    ret = job_trove_dspace_remove_list(s_op->req->u.create.fs_id,
        s_op->u.create.handle_array_local,
        NULL,
        s_op->u.create.handle_array_local_count,
        0,
        smcb,
        0,
        js_p,
        &j_id,
        server_job_context,
        s_op->req->hints);

    return ret;
}

static PINT_sm_action replace_remote_datafile_handles(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;
    PVFS_handle pool_handle;

    /* save the error code before we begin cleanup */
    if(!s_op->u.create.saved_error_code)
    {
        s_op->u.create.saved_error_code = js_p->error_code;
    }

    if(s_op->u.create.handle_index < s_op->u.create.handle_array_remote_count)
    {
        /* find pool that this handle belongs to */
        ret = job_precreate_pool_lookup_server(
            s_op->u.create.remote_io_servers[s_op->u.create.handle_index],
            s_op->req->u.create.fs_id,
            &pool_handle);
        if(ret < 0)
        {
            s_op->u.create.handle_index++;
            js_p->error_code = ret;
            return(SM_ACTION_COMPLETE);
        }

        /* return handle to pool */
        ret = job_precreate_pool_fill(
            pool_handle,
            s_op->req->u.create.fs_id,
            &s_op->u.create.handle_array_remote[s_op->u.create.handle_index],
            1,
            smcb,
            0,
            js_p,
            &j_id,
            server_job_context,
            s_op->req->hints);

        s_op->u.create.handle_index++;
        return(ret);
    }
    else
    {
        /* all handles have been replaced */
        js_p->error_code = REPLACE_DONE;
        return(SM_ACTION_COMPLETE);
    }
}

static PINT_sm_action remove_keyvals(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    /* save the error code before we begin cleanup */
    if(!s_op->u.create.saved_error_code)
    {
        s_op->u.create.saved_error_code = js_p->error_code;
    }

    /* the keyval keys and vals should still be valid here */
    ret = job_trove_keyval_remove_list(
        s_op->req->u.create.fs_id,
        s_op->resp.u.create.metafile_handle,
        s_op->key_a, s_op->val_a, s_op->error_a,
        2, TROVE_SYNC, NULL, smcb, 0, js_p, &j_id, server_job_context,
        s_op->req->hints);

    return ret;
}



static PINT_sm_action setup_local_datafile_handles(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i;
    int tmp_index = 0;
    server_configuration_s *config = get_server_config_struct();

//    gossip_debug(GOSSIP_LB_DEBUG, "Set df attr finished for %lld (local)with metafile %lld\n",s_op->u.create.handle_array_local[0], set_df_attr.metafile);


    if(s_op->resp.u.create.stuffed)
    {
        s_op->resp.u.create.datafile_handles[0] = 
            s_op->u.create.handle_array_local[0];
        js_p->error_code = 0;
        return(SM_ACTION_COMPLETE);
    }
    else
    {
        for(i=0; i<s_op->u.create.num_io_servers; i++)
        {
            /* find local server positions and set handles */
            if(!strcmp(s_op->u.create.io_servers[i], config->host_id))
            {
                s_op->resp.u.create.datafile_handles[i] = 
                    s_op->u.create.handle_array_local[tmp_index];
                tmp_index++;
            }
        }
    }

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action write_keyvals(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;
    int i;
    int tmp_index = 0;
    server_configuration_s *config = get_server_config_struct();
    char* tmpbuf;

    //    gossip_debug(GOSSIP_LB_DEBUG,"Enter write keyvals \n");
    if(s_op->u.create.handle_array_remote_count)
    {
        for(i=0; i<s_op->u.create.num_io_servers; i++)
        {
            /* find remote server positions and set handles */
            if(strcmp(s_op->u.create.io_servers[i], config->host_id))
            {
                s_op->resp.u.create.datafile_handles[i] = 
                    s_op->u.create.handle_array_remote[tmp_index];
                tmp_index++;
            }
        }
    }

    /* start with 2 keyvals: the distribution and the datafile handles */
    int keyval_count = 2;

    if(s_op->resp.u.create.stuffed)
    {
        /* also need to set the layout as a keyval */
        keyval_count+= 2;
    }

    s_op->key_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->key_a)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    s_op->val_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->val_a)
    {
        free(s_op->key_a);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    memset(s_op->val_a, 0, sizeof(PVFS_ds_keyval) * keyval_count);

    s_op->key_a[0].buffer = Trove_Common_Keys[METAFILE_HANDLES_KEY].key;
    s_op->key_a[0].buffer_sz = Trove_Common_Keys[METAFILE_HANDLES_KEY].size;

    s_op->val_a[0].buffer = s_op->resp.u.create.datafile_handles;
    s_op->val_a[0].buffer_sz =
        s_op->resp.u.create.datafile_count * sizeof(PVFS_handle);

    s_op->key_a[1].buffer = Trove_Common_Keys[METAFILE_DIST_KEY].key;
    s_op->key_a[1].buffer_sz = Trove_Common_Keys[METAFILE_DIST_KEY].size;

    s_op->val_a[1].buffer_sz =
        s_op->req->u.create.attr.u.meta.dist_size;
    s_op->val_a[1].buffer = malloc(s_op->val_a[1].buffer_sz);
    if(!s_op->val_a[1].buffer)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    PINT_dist_encode(s_op->val_a[1].buffer,
                     s_op->req->u.create.attr.u.meta.dist);

    if(s_op->resp.u.create.stuffed)
    {
        s_op->key_a[2].buffer = Trove_Common_Keys[METAFILE_LAYOUT_KEY].key;
        s_op->key_a[2].buffer_sz = Trove_Common_Keys[METAFILE_LAYOUT_KEY].size;

        s_op->val_a[2].buffer = malloc(PVFS_REQ_LIMIT_LAYOUT);
        if(!s_op->val_a[2].buffer)
        {
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        tmpbuf = s_op->val_a[2].buffer;
        encode_PVFS_sys_layout(&tmpbuf, &s_op->req->u.create.layout);

        s_op->val_a[2].buffer_sz = (tmpbuf - (char*)s_op->val_a[2].buffer);

        gossip_debug(GOSSIP_SERVER_DEBUG, 
            "create storing layout of size: %d\n", 
            s_op->val_a[2].buffer_sz);

        s_op->key_a[3].buffer = Trove_Common_Keys[NUM_DFILES_REQ_KEY].key;
        s_op->key_a[3].buffer_sz = Trove_Common_Keys[NUM_DFILES_REQ_KEY].size;

        gossip_debug(
            GOSSIP_SERVER_DEBUG, "create storing NUM_DFILES_REQ_KEY value of %d\n",
            s_op->req->u.create.num_dfiles_req);
        s_op->val_a[3].buffer = &s_op->req->u.create.num_dfiles_req;
        s_op->val_a[3].buffer_sz = sizeof(s_op->req->u.create.num_dfiles_req);
    }

    ret = job_trove_keyval_write_list(
        s_op->req->u.create.fs_id,
        s_op->resp.u.create.metafile_handle,
        s_op->key_a, s_op->val_a,
        keyval_count, TROVE_SYNC, NULL, smcb,
        0, js_p, &j_id, server_job_context,
        s_op->req->hints);
    return ret;
}

static PINT_sm_action setattr_setobj_attribs(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;
    PVFS_object_attr *a_p = NULL;
    PVFS_object_attr *dspace_a_p = NULL;
    PVFS_ds_attributes *ds_attr = NULL;

    dspace_a_p = &s_op->attr;
    a_p = &s_op->req->u.create.attr;

     /* 
      * Remember that mtime is versioned on disk! so convert it here..
      * It is better to do it here than change the PVFS_object_attr_overwrite_setable
      * macro, since there are many more users of it, I think.
      */
     if (a_p->mask & PVFS_ATTR_COMMON_MTIME_SET)
     {
         PVFS_time orig_mtime = a_p->mtime;
         a_p->mtime = PINT_util_mktime_version(orig_mtime);
         gossip_debug(GOSSIP_SETATTR_DEBUG, "setting version "
                 "to %llu\n\tmtime is %llu\n",
                 llu(a_p->mtime), llu(orig_mtime));
     }

     /*
        we have the attribs stored in the dspace, as well as the
        requested attribs to store.  overwrite the ones that are setable
        and specified by the mask value in the request; macro defined in
        pvfs2-storage.h
        */
     PVFS_object_attr_overwrite_setable(dspace_a_p, a_p);

     gossip_debug(
         GOSSIP_SERVER_DEBUG,
         "[STUFFED CREATE]: WRITING attrs: [owner = %d, group = %d\n\t"
         "perms = %o, type = %d, atime = %llu, mtime = %llu\n\t"
         "ctime = %llu | dfile_count = %d | dist_size = %d]\n",
         dspace_a_p->owner, dspace_a_p->group, dspace_a_p->perms,
         dspace_a_p->objtype, llu(dspace_a_p->atime),
         llu(PINT_util_mkversion_time(dspace_a_p->mtime)), llu(dspace_a_p->ctime),
         (int)dspace_a_p->u.meta.dfile_count,
         (int)dspace_a_p->u.meta.dist_size);

     /* translate attrs to storage attr format */
     ds_attr = &(s_op->ds_attr);
     PVFS_object_attr_to_ds_attr(dspace_a_p, ds_attr);

     ret = job_trove_dspace_setattr(
         s_op->req->u.create.fs_id, s_op->resp.u.create.metafile_handle,
         ds_attr,
         TROVE_SYNC,
         smcb, 0, js_p, &j_id, server_job_context,
         s_op->req->hints);

     return ret;
}

static int setup_resp(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    if (js_p->error_code == 0)
    {
        PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DEBUG,
                          "create: new metadata handle: %llu.\n",
                          llu(s_op->resp.u.create.metafile_handle));
    }

    return SM_ACTION_COMPLETE;
}


/*
 * Function: create_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static int cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    if(s_op->key_a)
    {
        free(s_op->key_a);
    }

    if(s_op->val_a)
    {
        if(s_op->val_a[1].buffer)
        {
            free(s_op->val_a[1].buffer);
        }
        if(s_op->resp.u.create.stuffed && s_op->val_a[2].buffer)
        {
            free(s_op->val_a[2].buffer);
        }
        free(s_op->val_a);
    }

    if(s_op->resp.u.create.datafile_handles)
    {
        free(s_op->resp.u.create.datafile_handles);
    }

    if(s_op->u.create.handle_array_remote)
    {
        free(s_op->u.create.handle_array_remote);
    }

    if(s_op->u.create.handle_array_local)
    {
        free(s_op->u.create.handle_array_local);
    }

    if(s_op->u.create.io_servers)
    {
        free(s_op->u.create.io_servers);
    }
    
    if(s_op->u.create.remote_io_servers)
    {
        free(s_op->u.create.remote_io_servers);
    }

    return(server_state_machine_complete(smcb));
}

static inline int PINT_get_object_ref_create(
    struct PVFS_server_req *req, PVFS_fs_id *fs_id, PVFS_handle *handle)
{
    *fs_id = req->u.create.fs_id;
    *handle = PVFS_HANDLE_NULL;
    return 0;
};

struct PINT_server_req_params pvfs2_create_params =
{
    .string_name = "create",
    .get_object_ref = PINT_get_object_ref_create,
    .perm = PINT_SERVER_CHECK_NONE,
    .access_type = PINT_server_req_modify,
    .state_machine = &pvfs2_create_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
