
/* 
 * (C) 2009 BeiHang University 
 *
 * See COPYING in top-level directory.
 *
 */

#include <string.h>
#include <assert.h>
#include <unistd.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-types.h"
#include "pvfs2-types-debug.h"
#include "pint-cached-config.h"
#include "pvfs2-util.h"
#include "pint-util.h"
#include "pvfs2-internal.h"
#include "pint-perf-counter.h"

/* global add and handle array for remote I/O servers */
PVFS_BMI_addr_t * remote_io_server_addr_array = NULL;    
PVFS_handle     * remote_io_server_handle_array = NULL;    
int             remote_io_server_count = 0;



static int set_df_attr_client_comp_fn(void* v_p, struct PVFS_server_resp *resp_p,  int i);


%%


nested machine pvfs2_set_df_attr_client_sm
{
	state init
	{
		run init_set_df_attr_client;
		success => send_set_df_attr_request;
	        default => cleanup;
	}
	
	state send_set_df_attr_request
	{
		run send_set_df_attr_request_op;
		success => send_set_df_attr_request_xfer_msgpair;
	        default => cleanup;
	}

	state send_set_df_attr_request_xfer_msgpair
	{
	        jump pvfs2_msgpairarray_sm;
	        default => cleanup;
	}
    
	state cleanup
	{
		run cleanup;
	        default => return;
	}
}

%%

static PINT_sm_action init_set_df_attr_client(
	struct PINT_smcb *smcb, job_status_s *js_p)
{
	
	struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
	int i, tmp_index, ret;

	server_configuration_s *config = get_server_config_struct();

	gossip_debug(GOSSIP_SERVER_DEBUG, "Enter init set df attr client 1\n");
	/* No remote I/O servers */
	if(s_op->u.create.handle_array_remote_count == 0)
	{
		js_p->error_code = 1;
		return(SM_ACTION_COMPLETE);
	}
	gossip_debug(GOSSIP_SERVER_DEBUG, "Enter init set df attr client 2 \n");



	/* Num of remote I/O server */
	remote_io_server_count = s_op->u.create.handle_array_remote_count;
	
	/* Allocate addr arry */
	remote_io_server_addr_array = (PVFS_BMI_addr_t *)malloc(sizeof(PVFS_BMI_addr_t) * remote_io_server_count );
	if (remote_io_server_addr_array == NULL)
	{
		PVFS_perror("malloc", -1);
		return -1;
	}

	remote_io_server_handle_array = (PVFS_handle *)malloc(sizeof(PVFS_handle) * remote_io_server_count );
	if (remote_io_server_handle_array == NULL)
	{
		PVFS_perror("malloc", -1);
		return -1;
	}

	
	gossip_debug(GOSSIP_SERVER_DEBUG, "malloc is OK: all %d, r %d \n", s_op->u.create.num_io_servers,remote_io_server_count);
	
	/* Get server's BMI address and its corresponing handle created before */
	tmp_index = 0;
	for (i = 0 ; i<s_op->u.create.num_io_servers; i++){
		/* Get rid of local server address */
		if(strcmp(s_op->u.create.io_servers[i], config->host_id))
		{
			ret = BMI_addr_lookup(&(remote_io_server_addr_array[tmp_index]), s_op->u.create.io_servers[i]);
			if(ret != 0)
			{
				/* Can't get address? */
				js_p->error_code = ret;
				return SM_ACTION_COMPLETE;
			}
			remote_io_server_handle_array[tmp_index] = s_op->u.create.handle_array_remote[tmp_index];
			gossip_debug(GOSSIP_SERVER_DEBUG, "R-server(%s): %lld, R-handle: %llu\n",s_op->u.create.io_servers[i], remote_io_server_addr_array[tmp_index],  llu(remote_io_server_handle_array[tmp_index]));

			tmp_index++;
		}
	}
	
	js_p->error_code = 0;
	return SM_ACTION_COMPLETE;
}

static PINT_sm_action send_set_df_attr_request_op(
	struct PINT_smcb *smcb, job_status_s *js_p){
  
	struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
	int i = 0;
	PINT_sm_msgpair_state *msg_p = NULL;


	/* Client's default Value  */
	s_op->msgarray_op.params.job_timeout = PVFS2_CLIENT_JOB_BMI_TIMEOUT_DEFAULT;
	s_op->msgarray_op.params.retry_limit = PVFS2_CLIENT_RETRY_LIMIT_DEFAULT;
	s_op->msgarray_op.params.retry_delay = PVFS2_CLIENT_RETRY_DELAY_MS_DEFAULT;
	s_op->msgarray_op.params.job_context = server_job_context;
	/* # of i/O servers */
	s_op->msgarray_op.count = remote_io_server_count;

	s_op->msgarray_op.msgarray = (PINT_sm_msgpair_state *)malloc(
		s_op->msgarray_op.count  * sizeof(PINT_sm_msgpair_state));

	if (s_op->msgarray_op.msgarray == NULL)
	{
		return -PVFS_ENOMEM;
	}

	foreach_msgpair(&s_op->msgarray_op, msg_p, i)
	{
		
		PINT_SERVREQ_SET_DF_ATTR_POSTER_FILL(
			msg_p->req,
			s_op->req->u.create.fs_id,
			remote_io_server_handle_array[i],
			0,
			s_op->resp.u.create.metafile_handle);
		
		msg_p->fs_id = s_op->target_fs_id;
		msg_p->handle = remote_io_server_handle_array[i];
		msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
		msg_p->comp_fn = set_df_attr_client_comp_fn;
		msg_p->svr_addr = remote_io_server_addr_array[i];
		gossip_debug(GOSSIP_SERVER_DEBUG,"addr=%lld\n", lld(msg_p->svr_addr));   
	}

	/* immediate return: next state jumps to msgpairarray machine */
	js_p->error_code = 0;




	PINT_sm_push_frame(smcb, 0, &s_op->msgarray_op);

	return SM_ACTION_COMPLETE;
}


static int set_df_attr_client_comp_fn(void* v_p,
				   struct PVFS_server_resp *resp_p,
				   int i)
{
	int j = 0;
	PINT_smcb *smcb = v_p;
	PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_MSGPAIR_PARENT_SM);


		
	/* if this particular request was successful, then store the 
	 * performance information in an array to be returned to caller
	 */

	if (s_op->msgarray_op.msgarray[i].op_status == 0)
	{
		gossip_debug(GOSSIP_SERVER_DEBUG, "Resp: %llu \n",llu(resp_p->u.set_df_attr_poster.handle));
	}

	/* if this is the last response, check all of the status values and 
	 * return error code if any requests failed 
	 */
	if (i == (s_op->msgarray_op.count -1))
	{
		for (j=0; j < s_op->msgarray_op.count; j++)
		{
			if (s_op->msgarray_op.msgarray[j].op_status != 0)
			{
				return(s_op->msgarray_op.msgarray[j].op_status);
			}
		}
	}

	return 0;
}



static PINT_sm_action cleanup(
	struct PINT_smcb *smcb, job_status_s *js_p){

	/* free the global buffer */
	free(remote_io_server_addr_array);
	free(remote_io_server_handle_array);
	remote_io_server_addr_array = NULL;
	remote_io_server_handle_array = NULL;
	remote_io_server_count = 0;


	js_p->error_code = 0;
	return SM_ACTION_COMPLETE;
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

